/***************************************************************************
	Copyright (C) 2021 by Diego Conti, Alessandro Ghigi and Roberto Pignatelli.

	This file is part of gullinbursti.
	Gullinbursti is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <https://www.gnu.org/licenses/>.
***************************************************************************

defines a function Admissible(G,M), modified from Algorithm 3 of [CGP]. It returns false,reason if the computation should be skipped, where reason is a string describing the criterion used to exclude the computation. It returns true if none of the criteria apply
*/

load "magma/include/genus.m";


_AbelianizationInvariants:=function(G)
	group:=G;
	if Type(group) eq GrpPerm then group:=FPGroup(group); end if;
	return AbelianQuotientInvariants(group);
end function;


//exclude the case where the abelianization cannot be generated by r-1 elements and the case where the lcm of r-1 elements in M is not a multiple of some abelian invariant.
_CannotGenerateAbelianization:=function(M,invariants)
	if #invariants ge #M then return true; end if;
	if IsEmpty(invariants) then return false; end if;	//skip the test for perfect groups
	last:=invariants[#invariants];
	M_as_set:={x: x in M};
	if not IsDivisibleBy(Lcm(M_as_set),last) then return true; end if;
	for x in M_as_set do		
		if Multiplicity(M,x) eq 1 and not IsDivisibleBy(Lcm(Exclude(M_as_set,x)),last) then return true; end if;
	end for;
	return false;
end function;

/* a modified version of function Admissible in Algorithm 3 of [CGP]. It returns false,reason if the computation should be skipped, where reason is a string describing the criterion used to exclude the computation.
It returns true if none of the criteria apply */
Admissible:=function(G, M)
	orders:={Order(g): g in G};
	if exists {m : m in M | m notin orders} then return false,"order"; end if;
  g:=Integers() ! Genus(M,Order(G));
	if g gt 2 and exists {o: o in orders | o gt 4*(g-1)} then return false,"KW"; end if;
	invariants:=_AbelianizationInvariants(G); 
	if _CannotGenerateAbelianization(M,invariants) then return false,"abelianization"; end if;
 	return true,0;
end function;
